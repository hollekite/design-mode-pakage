概述：
	访问者模式是对像的行为模式，目的是封装一些施加于某种数据结构之上的操作。一旦这个操作需要更改的话，接受这个操作的数据可以可以保持不变。

--------->最终目的：将数据处理和数据相隔离
	
分派的概念：
	变量被声明时的类型称为静态类型（明显类型），而变量所引用的对像的类型又称为真实类型（实际类型）
	根据对像类型而对方法进行的选择就是分派。分派分为两种：静态分派、动态分派
	静态分派发生在编译时期，根据变量的静态类型信息发生。方法重载就是静态分派，java的方法重载就是静态分派。
	动态分派发生在运行时期，动态分派动态的置换掉某个方法。
	
	静态分派例子：
		public class Mozi {
    
			public void ride(Horse h){
				System.out.println("骑马");
			}
			
			public void ride(WhiteHorse wh){
				System.out.println("骑白马");
			}
			
			public void ride(BlackHorse bh){
				System.out.println("骑黑马");
			}
			
			public static void main(String[] args) {
				Horse wh = new WhiteHorse();
				Horse bh = new BlackHorse();
				Mozi mozi = new Mozi();
				mozi.ride(wh);
				mozi.ride(bh);
			}

		}
		
		--------->该例子会打印两次相同的"骑马"，应为虽然两次ride方法传入的是不同的参数wh和bh,他们虽然有不同的真实类型，但他们的静态类型都是一样的。均为Horse类型。---->重载方法的分派是根据静态类型进行的。这个分派在编译时就完成了。
		
		
	动态分派：
		jav通过重写支持动态分派。
		例子：
			public class Horse {
		
				public void eat(){
					System.out.println("马吃草");
				}
			}
			
			
			public class BlackHorse extends Horse {
		
				@Override
				public void eat() {
					System.out.println("黑马吃草");
				}
			}
			
			public class Client {

				public static void main(String[] args) {
					Horse h = new BlackHorse();
					h.eat();
				}

			}
		------>变量h的静态类型是Horse，而真实类型是BlackHorse。java编译器在编译的时候只知道对像的静态类型，而不知道对像的真实类型，而方法的调用则是根据对像的真实类型。而不是静态类型。因此编译器在编译的时候不知道哪些代码会被执行。因为上述例子中变量的真实类型是BlackHorse所有最后执行的是"黑马吃草"。
		
		
		
	分派的类型：
		一个方法所属的对像叫做方法的接收者，方法的接受者和方法的参数统称方法的宗量。
		根据分派可以基于多少种宗量可以将语言分为：单分派语言和多分派语言
		单分派语言根据一个宗量的类型进行对方法的选择。多分派语言根据多余一个宗量的类型对方法进行选择。java 是动态单分派类型语言。
		在一个支持动态单分派的语言里，有两个条件决定请求会调用哪个操作（方法）：一个请求的名字，二是接收者的类型。单分派限制了方法的选择过程。使得只有一个宗量被考虑到。这个宗量通常激素hi方法的接收者。
		